realm: playground
enabled: true
displayName: Playground

loginWithEmailAllowed: true
resetPasswordAllowed: true
sslRequired: $(env:SSL_REQUIRED:-EXTERNAL)

loginTheme: keycloak
accountTheme: keycloak.v3
emailTheme: keycloak

#browserFlow: "browser opa"
#directGrantFlow: "direct grant opa"

eventsEnabled: true
# 120 days
eventsExpiration: 10368000

clients:
  - clientId: client-legacy-app
    protocol: openid-connect
    name: Legacy App
    description: "Legacy App that can obtain tokens with Username + Password and ClientId+Secret via grant_type=password"
    enabled: true
    publicClient: false
    standardFlowEnabled: false
    directAccessGrantsEnabled: true
    serviceAccountsEnabled: false
    secret: "$(env:EXAMPLES_CLIENT_SECRET:-secret)"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"

    protocolMappers:
      - name: opa-claims
        protocol: openid-connect
        protocolMapper: oidc-opa-claim-mapper
        config:
          # authzUrl: http://opa:8181/v1/data
          # realmRolesPattern: ".*"
          # clientRolesPattern: ".*"
          # useClientAttributes: 'false'
          # useRealmAttributes: 'false'
          # useClientRoles: 'true'
          useUserAttributes: 'true'
          # useRealmRoles: 'true'
          # useGroups: 'true'
          claim.name: "opa_claims"
          jsonType.label: "JSON"
          access.token.claim: 'true'
          userinfo.token.claim: 'true'
          id.token.claim: 'true'

identityProviders:
  - alias: idp-users-saml
    displayName: SAML Users Login
    providerId: saml
    enabled: true
    updateProfileFirstLoginMode: 'on'
    trustEmail: true
    storeToken: false
    addReadTokenRoleOnCreate: false
    authenticateByDefault: false
    linkOnly: false
    firstBrokerLoginFlowAlias: first broker login
    config:
      validateSignature: 'true'
      hideOnLoginPage: false
      guiOrder: "2000"
      # Note this singing certificate must match the 'custom-rsa-generated' in acme-saml.yaml
      signingCertificate: "MIIClzCCAX8CBgF/0OmrYzANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDDARkZW1vMB4XDTIyMDMyODE0MjIyOVoXDTMyMDMyODE0MjQwOVowDzENMAsGA1UEAwwEZGVtbzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMOVGgrZfj96C5zNhlzLi8KWXoqVYq2ZWlH5mykT55FSvwC5m5/Px63VOzxuNWDAyGz8Uq9lUa5ED2D10W/e72AIbEC0w2F9z91cyElitsr/uQoI3snCJjLchXMez50u0J/g/78tfhv1ICo6EhPzupMBWwl+Liw1fiUv54pLPVM1r450fcQxaVX/jZszzZgLrtzbQz73uoUHJ6QJ7N2wz5c+sG3iy9OyVQl+uI0dIs9RFc57UUOURw2lOPgAPErKnckV5gEDQ16C07EvjVzzv1Q6SE2FIVN4F65qSRQ1iXU2uI0rdNTOkju5WNJylsmp8dfJE8HiOwjQ8ArZ/nTAgukCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAcDoujUldX1HiCjPjLrcUaY+LNCSsGWeN7g/lI7z18sxg3VlhsPz2Bg5m4zZCFVcrTPax1PuNqYIxetR9fEP8N+8GHLTnd4KrGvE6rH8xwDDk3GET5QKHnaUDUoxdOND85d65oL20NDIHaNDP+Kw/XIktV30mTKZerkDpxJSC9101RDwVhH3zpr0t4CYTnnR6NTBNkVRfDl19Nia98KpbSJizIw2y0zC8wubJzFnBoWbXv1AXOqTZUR2pyP742YJNA/9NFg4+EDbW/ZJVaajY+UVN8ImCj1T32f78189d3NFoCX81pBkmRv8YfXetZgDcofuKKTkUmFlP55x5S32Vmw=="
      postBindingLogout: 'true'
      nameIDPolicyFormat: "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
      postBindingResponse: 'true'
      principalAttribute: "username"
      singleLogoutServiceUrl: "$(env:KEYCLOAK_FRONTEND_URL)/realms/users-saml/protocol/saml"
      entityId: users_saml_idp_broker
      backchannelSupported: 'true'
      signatureAlgorithm: RSA_SHA256
      xmlSigKeyInfoKeyNameTransformer: KEY_ID
      loginHint: 'true'
      authnContextComparisonType: exact
      postBindingAuthnRequest: 'true'
      syncMode: FORCE
      singleSignOnServiceUrl: "$(env:KEYCLOAK_FRONTEND_URL)/realms/users-saml/protocol/saml"
      wantAuthnRequestsSigned: 'true'
      addExtensionsElementWithKeyInfo: 'false'
      principalType: SUBJECT

identityProviderMappers:
  - name: lastname-importer
    identityProviderAlias: idp-users-saml
    identityProviderMapper: saml-user-attribute-idp-mapper
    config:
      syncMode: FORCE
      user.attribute: lastName
      attributes: "[]"
      attribute.friendly.name: surname
  - name: firstname-importer
    identityProviderAlias: idp-users-saml
    identityProviderMapper: saml-user-attribute-idp-mapper
    config:
      syncMode: FORCE
      user.attribute: firstName
      attributes: "[]"
      attribute.friendly.name: givenName

roles:
  # Realm specific roles
  realm:
    - name: "user"
      description: "User Role"
    - name: "admin"
      description: "Admin Role"
    - name: "guest"
      description: "Guest Role"

groups:
  - "name": "Users"
    "attributes":
      groupAttribute1: ["groupAttributeValue1"]
    "realmRoles":
      - "user"
    #    "clientRoles": {}
    "subGroups": []

  - "name": "Admins"
    "realmRoles":
      - "admin"

  - "name": "Guests"
    "realmRoles":
      - "guest"

users:
  - username: tester
    email: test@local.test
    emailVerified: true
    firstName: Theo
    lastName: Tester
    enabled: true
    attributes:
      locale: [ "de" ]
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "user"
    groups:
      - "Users"
  - username: admin
    email: admin@local.test
    emailVerified: true
    firstName: Arno
    lastName: Admin
    enabled: true
    attributes:
      locale: [ "de" ]
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "admin"
    groups:
      - "Admins"
  - username: guest
    email: guest@local.test
    emailVerified: true
    firstName: Guido
    lastName: Guest
    enabled: true
    attributes:
      locale: [ "de" ]
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "guest"
    groups:
      - "Guests"