realm: opademo
enabled: true
displayName: opademo

loginWithEmailAllowed: true
resetPasswordAllowed: true
sslRequired: $(env:SSL_REQUIRED:-EXTERNAL)

loginTheme: keycloak
accountTheme: keycloak.v3
emailTheme: keycloak

eventsListeners:
  - "jboss-logging"
  - "custom-event-listener"

eventsEnabled: true

#browserFlow: "browser opa"
#directGrantFlow: "direct grant opa"

authenticationFlows:
  - alias: "opa-browser"
    description: "OPA Browser Flow"
    providerId: basic-flow
    builtIn: false
    topLevel: true
    authenticationExecutions:
      - flowAlias: "Login"
        requirement: REQUIRED
        authenticatorFlow: true
      - authenticator: auth-opa-authz
        requirement: REQUIRED
        authenticatorConfig: "opa-browser-auth-default"

  - alias: "Login"
    description: "Sub-Flow to ask user for username an password"
    providerId: basic-flow
    topLevel: false
    builtIn: false
    authenticationExecutions:
      - authenticator: auth-cookie
        requirement: ALTERNATIVE
      - authenticator: identity-provider-redirector
        requirement: ALTERNATIVE
      - flowAlias: "Identity Forms"
        requirement: ALTERNATIVE
        autheticatorFlow: true

  - alias: "Identity Forms"
    description: "Sub-Flow to ask user for username an password"
    providerId: basic-flow
    topLevel: false
    builtIn: false
    authenticationExecutions:
      - authenticator: auth-username-password-form
        requirement: REQUIRED
      - flowAlias: "2FA Forms"
        requirement: CONDITIONAL
        authenticatorFlow: true

  - alias: "2FA Forms"
    description: "Sub-Flow to ask user for 2FA"
    providerId: basic-flow
    topLevel: false
    builtIn: false
    authenticationExecutions:
      - authenticator: conditional-user-configured
        requirement: REQUIRED
      - authenticator: auth-otp-form
        requirement: ALTERNATIVE
      - authenticator: auth-recovery-authn-code-form
        requirement: ALTERNATIVE

#  - alias: "OPA: direct grant"
#    description: "OpenID Connect Resource Owner Grant with OPA"
#    providerId: "basic-flow"
#    topLevel: true
#    authenticationExecutions:
#      - authenticator: "direct-grant-validate-username"
#        requirement: "REQUIRED"
#        priority: 10
#      - authenticator: "direct-grant-validate-password"
#        requirement: "REQUIRED"
#        priority: 20
#      - flowAlias: "OPA: Direct Grant - Conditional OTP"
#        authenticatorFlow: true
#        requirement: "CONDITIONAL"
#        priority: 30
#
#  - alias: "OPA: Direct Grant - Conditional OTP"
#    description: "Flow to determine if the OTP is required for the authentication with OPA"
#    providerId: "basic-flow"
#    topLevel: false
#    authenticationExecutions:
#      - authenticator: "conditional-user-configured"
#        requirement: "REQUIRED"
#        priority: 10
#      - authenticator: "direct-grant-validate-otp"
#        requirement: "REQUIRED"
#        priority: 20

authenticatorConfig:
  - alias: "opa-browser-auth-default"
    config:
      opa-url: "http://keycloak-opa:8181/v1/data/iam/keycloak/allow"
      opa-policy-path: "/keycloak/realms/{realm}/{action}/allow"
      opa-context-attributes: "remoteAddress,protocol,grantType"
      opa-user-attributes: "email,emailVerified"
      opa-request-headers: "Authorization,Content-Type,Custom-Header"

clients:
  - clientId: app1
    protocol: openid-connect
    name: App1
    description: "App1: Access with client role 'access'"
    enabled: true
    publicClient: true
    standardFlowEnabled: true
    directAccessGrantsEnabled: false
    # Show client in account-console
    alwaysDisplayInConsole: true
    serviceAccountsEnabled: false
    #    attributes: { }
    fullScopeAllowed: false
    rootUrl: "https://www.keycloak.org/app"
    baseUrl: "/#url=$(env:KEYCLOAK_FRONTEND_URL:-https://id.kubecon.test:8443/auth)&realm=opademo&client=app1"
    adminUrl: ""
    redirectUris:
      - "/*"
    webOrigins:
      - "+"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"
    attributes:
      "post.logout.redirect.uris": "+"

  - clientId: app2
    protocol: openid-connect
    name: App2
    description: "App2: Access with indirect client role 'access'"
    enabled: true
    publicClient: true
    standardFlowEnabled: true
    directAccessGrantsEnabled: false
    # Show client in account-console
    alwaysDisplayInConsole: true
    serviceAccountsEnabled: false
    #    attributes: { }
    fullScopeAllowed: false
    rootUrl: "https://www.keycloak.org/app"
    baseUrl: "/#url=$(env:KEYCLOAK_FRONTEND_URL:-https://id.kubecon.test:8443/auth)&realm=opademo&client=app2"
    adminUrl: ""
    redirectUris:
      - "/*"
    webOrigins:
      - "+"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"
    attributes:
      "post.logout.redirect.uris": "+"

  - clientId: app3
    protocol: openid-connect
    name: App3
    description: "App3: Access for 'Users' Group members"
    enabled: true
    publicClient: true
    standardFlowEnabled: true
    directAccessGrantsEnabled: false
    # Show client in account-console
    alwaysDisplayInConsole: true
    serviceAccountsEnabled: false
    #    attributes: { }
    fullScopeAllowed: false
    rootUrl: "https://www.keycloak.org/app"
    baseUrl: "/#url=$(env:KEYCLOAK_FRONTEND_URL:-https://id.kubecon.test:8443/auth)&realm=opademo&client=app3"
    adminUrl: ""
    redirectUris:
      - "/*"
    webOrigins:
      - "+"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"
    attributes:
      "post.logout.redirect.uris": "+"

  - clientId: app4-foo
    protocol: openid-connect
    name: app4-foo
    description: "app4-foo Access for FooBar Group Members"
    enabled: true
    publicClient: true
    standardFlowEnabled: true
    directAccessGrantsEnabled: false
    # Show client in account-console
    alwaysDisplayInConsole: true
    serviceAccountsEnabled: false
    #    attributes: { }
    fullScopeAllowed: false
    rootUrl: "https://www.keycloak.org/app"
    baseUrl: "/#url=$(env:KEYCLOAK_FRONTEND_URL:-https://id.kubecon.test:8443/auth)&realm=opademo&client=app4-foo"
    adminUrl: ""
    redirectUris:
      - "/*"
    webOrigins:
      - "+"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"
    attributes:
      "post.logout.redirect.uris": "+"

  - clientId: app5-bar
    protocol: openid-connect
    name: app5-bar
    description: "app5-bar Access for FooBar Group Members"
    enabled: true
    publicClient: true
    standardFlowEnabled: true
    directAccessGrantsEnabled: false
    # Show client in account-console
    alwaysDisplayInConsole: true
    serviceAccountsEnabled: false
    #    attributes: { }
    fullScopeAllowed: false
    rootUrl: "https://www.keycloak.org/app"
    baseUrl: "/#url=$(env:KEYCLOAK_FRONTEND_URL:-https://id.kubecon.test:8443/auth)&realm=opademo&client=app5-bar"
    adminUrl: ""
    redirectUris:
      - "/*"
    webOrigins:
      - "+"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"
    attributes:
      "post.logout.redirect.uris": "+"

  - clientId: app6-check-network
    protocol: openid-connect
    name: app6-check-network
    description: "app6-check-network Access from specific network"
    enabled: true
    publicClient: true
    standardFlowEnabled: true
    directAccessGrantsEnabled: false
    # Show client in account-console
    alwaysDisplayInConsole: true
    serviceAccountsEnabled: false
    #    attributes: { }
    fullScopeAllowed: false
    rootUrl: "https://www.keycloak.org/app"
    baseUrl: "/#url=$(env:KEYCLOAK_FRONTEND_URL:-https://id.kubecon.test:8443/auth)&realm=opademo&client=app6-check-network"
    adminUrl: ""
    redirectUris:
      - "/*"
    webOrigins:
      - "+"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"
    attributes:
      "post.logout.redirect.uris": "+"

  - clientId: app7-password-grant
    protocol: openid-connect
    name: app7-password-grant
    description: "Legacy App that can obtain tokens with Username + Password and ClientId+Secret via grant_type=password"
    enabled: true
    publicClient: false
    standardFlowEnabled: false
    directAccessGrantsEnabled: true
    serviceAccountsEnabled: false
    secret: "secret"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"


  - clientId: app8-client-credentials
    protocol: openid-connect
    name: app8-client-credentials
    description: "Service that can obtain tokens with ClientId+Secret via grant_type=client_credentials"
    enabled: true
    publicClient: false
    standardFlowEnabled: false
    directAccessGrantsEnabled: false
    serviceAccountsEnabled: true
    secret: "secret"
    defaultClientScopes:
      - "email"
      - "profile"
    optionalClientScopes:
      - "phone"

roles:
  # Realm specific roles
  realm:
    - name: "admin"
      description: "Admin Role"
      composite: true
      composites:
        client:
          "realm-management":
            - view-realm
            - view-users
            - query-users
            - query-groups
    - name: "user"
      description: "User Role"
    - name: "guest"
      description: "Guest Role"

    - name: "customer-admin"
      description: "Customer Admin Role"
      composite: true
      composites:
        client:
          "realm-management":
            - view-users
            - query-users
            - query-groups

  client:
    "app1":
      - name: "access"
        description: "App1: Access"
        clientRole: true
    "app2":
      - name: "access"
        description: "App2: Access"
        clientRole: true
    "app3":
      - name: "access"
        description: "App3: Access"
        clientRole: true


groups:
  - name: "Users"
    attributes:
      groupAttribute1: ["groupAttributeValue1"]
    "realmRoles":
      - "user"
    "clientRoles": {}

  - name: "Admins"
#    "realmRoles":
#      - "admin"

  - name: "Guests"
#    "realmRoles":
#      - "guest"

  - name: "FooBar"

  - name: "customers"
    subGroups:
      - name: "customers1"
      - name: "customers2"

users:
  - username: tester
    email: test@local.test
    emailVerified: true
    firstName: Theo
    lastName: Tester
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false

# UC1: admin-console - check for realm role
#    realmRoles:
#      - "user"

# UC2: app1 - check for current client role
#    clientRoles:
#      app1:
#        - "access"

# UC3: app2 - check for explicit client role
#      app2:
#        - "access"

# UC4: app3 - check for group membership
#    groups:
#      - "Users"

# UC5: app4 / app5 - multi-client check for group membership
#      - "FooBar"

  - username: admin
    email: admin@local.test
    emailVerified: true
    firstName: Arno
    lastName: Admin
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "admin"

    groups:
      - "Admins"

  - username: guest
    email: guest@local.test
    emailVerified: true
    firstName: Guido
    lastName: Guest
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "guest"
    groups:
      - "Guests"

  - username: c1-admin
    email: c1-admin@local.test
    emailVerified: true
    firstName: Admin
    lastName: Customer 1
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "customer-admin"

  - username: c1-user1
    email: c1-user1@local.test
    emailVerified: true
    firstName: User1
    lastName: Customer 1
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false

  - username: c1-user2
    email: c1-user2@local.test
    emailVerified: true
    firstName: User2
    lastName: Customer 1
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false

  - username: c2-admin
    email: c2-admin@local.test
    emailVerified: true
    firstName: Admin
    lastName: Customer 2
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false
    realmRoles:
      - "customer-admin"

  - username: c2-user1
    email: c2-user1@local.test
    emailVerified: true
    firstName: User1
    lastName: Customer 2
    enabled: true
    credentials:
      - type: password
        userLabel: initial
        value: test
        temporary: false